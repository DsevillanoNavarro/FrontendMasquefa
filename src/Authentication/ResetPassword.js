import React, { useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import './ResetPassword.css';
import { api } from '../services/loginService';

export default function ResetPassword() {
  // Obtenemos los par√°metros uidb64 y token de la URL usando useParams de react-router
  const { uidb64, token } = useParams();

  // Estado para almacenar la nueva contrase√±a ingresada por el usuario
  const [password, setPassword] = useState('');
  // Estado para controlar si la petici√≥n est√° en proceso de carga (loading)
  const [loading, setLoading] = useState(false);
  // Estado para mostrar mensajes de √©xito o error
  const [mensaje, setMensaje] = useState('');
  // Estado para definir el tipo de mensaje, puede ser 'success' o 'error'
  const [tipoMensaje, setTipoMensaje] = useState('');

  /**
   * Funci√≥n para validar la contrase√±a seg√∫n criterios:
   * - largo: m√≠nimo 8 caracteres
   * - mayuscula: contiene al menos una letra may√∫scula
   * - numero: contiene al menos un n√∫mero
   * Retorna un objeto con el resultado de cada validaci√≥n (true/false)
   */
  const validarPassword = (password) => ({
    largo: password.length >= 8,
    mayuscula: /[A-Z]/.test(password),
    numero: /\d/.test(password)
  });

  // Obtenemos las validaciones actualizadas para la contrase√±a ingresada
  const validaciones = validarPassword(password);

  /**
   * Funci√≥n que se ejecuta al enviar el formulario
   * - Previene la recarga de p√°gina (e.preventDefault)
   * - Limpia mensajes previos
   * - Muestra indicador de carga
   * - Env√≠a petici√≥n POST a la API para confirmar el cambio de contrase√±a
   * - Muestra mensajes seg√∫n respuesta o error
   */
  const handleSubmit = async (e) => {
    e.preventDefault();
    setMensaje('');
    setTipoMensaje('');
    setLoading(true);

    try {
      // Petici√≥n POST al endpoint /password-reset-confirm/ con los datos necesarios
      const res = await api.post('/password-reset-confirm/', {
        uidb64,
        token,
        new_password: password
      });
      // Si la respuesta tiene un mensaje de detalle, mostrarlo, sino un mensaje por defecto
      setMensaje(res.data.detail || 'Contrase√±a cambiada correctamente.');
      setTipoMensaje('success');
    } catch (err) {
      // En caso de error, mostrar mensaje de error recibido o uno gen√©rico
      const detalle = err.response?.data?.detail || 'Error inesperado';
      setMensaje(detalle);
      setTipoMensaje('error');
    } finally {
      // Ocultar indicador de carga independientemente del resultado
      setLoading(false);
    }
  };

  return (
    <div className="login-container slide-down-fade">
      {/* T√≠tulo de la p√°gina */}
      <h2 className="login-title">Restablecer contrase√±a</h2>

      {/* Mostrar mensaje de error o √©xito solo si existe */}
      {mensaje && (
        <p className={`alert-message ${tipoMensaje === 'error' ? 'alert-error' : 'alert-success'}`}>
          {mensaje}
        </p>
      )}

      {/* Si el cambio fue exitoso, mostrar enlace para iniciar sesi√≥n */}
      {tipoMensaje === 'success' ? (
        <div className="login-links">
          <Link to="/login" className="login-link">
            üëâ Inicia sesi√≥n ahora
          </Link>
        </div>
      ) : (
        /* Si no hay √©xito a√∫n, mostrar el formulario para ingresar nueva contrase√±a */
        <form onSubmit={handleSubmit}>
          {/* Input para la nueva contrase√±a */}
          <input
            type="password"
            className="login-input"
            placeholder="Nueva contrase√±a"
            value={password}
            onChange={(e) => setPassword(e.target.value)} // Actualiza el estado password
            required
          />

          {/* Lista con los criterios de validaci√≥n y si se cumplen o no */}
          <ul className="password-checklist">
            <li className={validaciones.largo ? 'valid' : 'invalid'}>
              {validaciones.largo ? '‚úÖ' : '‚ùå'} Al menos 8 caracteres
            </li>
            <li className={validaciones.mayuscula ? 'valid' : 'invalid'}>
              {validaciones.mayuscula ? '‚úÖ' : '‚ùå'} Al menos una letra may√∫scula
            </li>
            <li className={validaciones.numero ? 'valid' : 'invalid'}>
              {validaciones.numero ? '‚úÖ' : '‚ùå'} Al menos un n√∫mero
            </li>
          </ul>

          {/* Bot√≥n para enviar el formulario, deshabilitado si est√° cargando o si alguna validaci√≥n no pasa */}
          <button
            type="submit"
            className="login-btn"
            disabled={loading || !Object.values(validaciones).every(Boolean)}
          >
            {/* Texto cambia seg√∫n estado de carga */}
            {loading ? 'Enviando...' : 'Cambiar contrase√±a'}
          </button>
        </form>
      )}

      {/* Enlace para volver a login si record√≥ su contrase√±a */}
      <div className="login-links">
        <Link to="/login" className="login-link">
          ¬øRecordaste tu contrase√±a? Inicia sesi√≥n
        </Link>
      </div>
    </div>
  );
}
